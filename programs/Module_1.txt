Questions
1. What does the cv2.imread function do?
A. Loads an image from disk.

2. What does the cv2.imshow function do?
A. Displays the image to our screen.

3. Why is the cv2.waitKey function important?
A. Without it, our image would be displayed to screen, but would close automatically.

4. Why do we use command line arguments?
A. To ensure variables can be supplied at script runtime.
   Like our image location

5. Suppose we wanted to add a command line argument that requires a user 
   to supply an output image filename. What would that line of code look like?   
A. ap.add_argument("-o", "--output", required=True)

   
6. Suppose we have an image with 383 rows and 972 columns. How many pixels are in this image?
A. 383 x 972 = 372276

7. Pixels in the RGB and grayscale color space are (normally) represented in the range:
[0, 255]

8. OpenCV represents RGB images in which order?
A. BGR

9. Images are most commonly represented in which color space?
A. RGB, although there are other types of color spaces such as HSV, L*a*b

10. Suppose we wanted to construct the color blue using OpenCV. How do you do that?
A. (255,0,0) since the pixel colors are represented in BGR (Blue, Green, Red) order in openCV

10. Suppose we wanted to construct the color red using OpenCV. How do you do that?
A. (0,0,255) since the pixel colors are represented in BGR (Blue, Green, Red) order in openCV

11. The point (0, 0) corresponds to which corner of the image?
A. Top left corner

12. Both Python and NumPy are zero-indexed:
True

13. How do you get the pixel value for an image at x=111 and y=225?
A. image[225, 111]

14. What is the correct line of code to construct a blank canvas with a width of 300 pixels and a height of 200 pixels?
A. canvas = np.zeros((200, 300, 3),dtype="uint8")
Observe that we are specifying the height first, and then the width, since we are actually defining the numpy array with all 0

15. What is the correct line of code to draw a blue, filled-in rectangle starting at point (10, 10) and ending at point (60, 60)?
A. cv2.rectangle(canvas, (10, 10), (60, 60), (255, 0, 0), -1)


